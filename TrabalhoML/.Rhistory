# Carregando os dados a partir do arquivo CSV phishing_websites contendo as informações sobre os sites
# Esse arquivo deve estar na pasta raiz do projeto dentro da pasta Dataset
data <- read.csv(file="Dataset/phishing_websites.csv", header=FALSE, sep=",")
# Nome das colunas, ou seja, o nome dos atributos dos dados.
# O último atributo (target) informa se o site é phishing ou não (1 para phishing e -1 para seguro)
atributos <- c("ip_como_url", "url_longa", "encurtador_links", "tem_arroba",
"redireciona_barra_barra", "prefx_sufx_hifen", "sub_dominio",
"estado_ssl", "duracao_dominio", "favicon", "porta_nao_padrao",
"https_token", "url_requisicao", "cond_ancora", "tag_links",
"SFH", "pede_email", "url_anormal", "redireciona",
"status_bar", "click_direito", "popup", "iframe_redirec",
"idade_dominio", "dns_registro", "trafego", "rank_pagina",
"indexado_google", "links_para_pagina", "relatorios_estatisticos", "target")
# Adicionamos à tabela de dados o nome das colunas
names(data) <- atributos
# Embaralhamos os dados utilizados
data <- data[sample(1:nrow(data),length(1:nrow(data))),1:ncol(data)]
# Separamos os dados do target de cada um
dataValues <- data[,1:30]
dataTargets <- decodeClassLabels(data[,31])
# Aplicamos o algoritmo de K Fold Cross Validation com K = 10
k_cv <- 10
folds <- cut(seq(1, nrow(data)), breaks = k_cv, labels=FALSE)
accuracyList <- vector("numeric", k_cv)
for (i in 1:k_cv) {
cat("Iniciando geração do modelo para k =", i, "\n")
testIndexes <- which(folds==i, arr.ind = TRUE)
testDataValues <- dataValues[testIndexes, ]
testDataTargets <- dataTargets[testIndexes, ]
trainDataValues <- dataValues[-testIndexes, ]
trainDataTargets <- dataTargets[-testIndexes, ]
model <- RSNNS::mlp(trainDataValues, trainDataTargets, size=c(12,12,12,12), learnFuncParams=c(0.1,0.2,0.1,0.2),
maxit=3000, learnFunc="Rprop", inputsTest=testDataValues, targetsTest=testDataTargets)
predictions <- predict(model, testDataValues)
myMatrix <- RSNNS::confusionMatrix(testDataTargets,predictions)
accuracyPrediction <- (myMatrix[1, 1] + myMatrix[2, 2])/nrow(testDataTargets)
accuracyList[i] <- accuracyPrediction
cat("Matriz de confusao para k =", i, "\n")
print(myMatrix)
cat("A acurácia para k =", i, "é", accuracyPrediction, "\n")
}
averageAccuracy = mean(accuracyList)
cat("A acurácia final do modelo é", averageAccuracy)
# Dividimos os dados em treinamento e teste.
# Ao invés de utilizar 15% dos dados para teste, que é o valor padrão, utilizamos 25%
# Essa escolha foi feita com base em testes e documentação do problema
# data <- splitForTrainingAndTest(dataValues, dataTargets, ratio = 0.25)
# Normalizamos o conjunto de dados para uma faixa de representacao igual para todos atributos
# data <- normTrainingAndTestSet(data)
# Gera o modelo MLP treinado.
# data$inputsTrain é a matriz com as entradas de treinamento da rede neural
# data$targetsTrain são os targets correspondentes para cada dado do treinamento
# size é a quantidade de camadas ocultas e os neurônios em cada uma
# learnFuncParams define os parâmetros da função de aprendizagem
# maxit é o número máximo de iterações a aprender
# inputsTest é a matriz com as entradas para testar a rede neural
# targetsTest são os targets correspondentes para cada dado de teste
#model <- RSNNS::mlp(data$inputsTrain, data$targetsTrain, size=c(11,11,11,11), learnFuncParams=c(0.1,0.2,0.1,0.2),
#             maxit=3000, learnFunc="Rprop", inputsTest=data$inputsTest, targetsTest=data$targetsTest)
#summary(model)
#model
#RSNNS::weightMatrix(model)
#RSNNS::extractNetInfo(model)
#par(mfrow=c(2,2))
#RSNNS::plotIterativeError(model)
# Calculando as saidas previstas pela rede MLP
#predictions <- predict(model, data$inputsTest)
#RSNNS::plotRegressionError(predictions[,2], data$targetsTest[,2])
# Monta a matrix de confusão entre a saída esperada e a saída calculada
#RSNNS::confusionMatrix(data$targetsTrain,fitted.values(model))
#RSNNS::confusionMatrix(data$targetsTest,predictions)
#modelPrecision <- 1.2
library(RSNNS)
library(doParallel)
# Registramos computação paralela
# O número de "workers" é igual a metade do número de núcleos do processador da máquina
registerDoParallel()
# Carregando os dados a partir do arquivo CSV phishing_websites contendo as informações sobre os sites
# Esse arquivo deve estar na pasta raiz do projeto dentro da pasta Dataset
data <- read.csv(file="Dataset/phishing_websites.csv", header=FALSE, sep=",")
# Nome das colunas, ou seja, o nome dos atributos dos dados.
# O último atributo (target) informa se o site é phishing ou não (1 para phishing e -1 para seguro)
atributos <- c("ip_como_url", "url_longa", "encurtador_links", "tem_arroba",
"redireciona_barra_barra", "prefx_sufx_hifen", "sub_dominio",
"estado_ssl", "duracao_dominio", "favicon", "porta_nao_padrao",
"https_token", "url_requisicao", "cond_ancora", "tag_links",
"SFH", "pede_email", "url_anormal", "redireciona",
"status_bar", "click_direito", "popup", "iframe_redirec",
"idade_dominio", "dns_registro", "trafego", "rank_pagina",
"indexado_google", "links_para_pagina", "relatorios_estatisticos", "target")
# Adicionamos à tabela de dados o nome das colunas
names(data) <- atributos
# Embaralhamos os dados utilizados
data <- data[sample(1:nrow(data),length(1:nrow(data))),1:ncol(data)]
# Separamos os dados do target de cada um
dataValues <- data[,1:30]
dataTargets <- decodeClassLabels(data[,31])
# Aplicamos o algoritmo de K Fold Cross Validation com K = 10
k_cv <- 10
folds <- cut(seq(1, nrow(data)), breaks = k_cv, labels=FALSE)
accuracyList <- vector("numeric", k_cv)
for (i in 1:k_cv) {
cat("Iniciando geração do modelo para k =", i, "\n")
testIndexes <- which(folds==i, arr.ind = TRUE)
testDataValues <- dataValues[testIndexes, ]
testDataTargets <- dataTargets[testIndexes, ]
trainDataValues <- dataValues[-testIndexes, ]
trainDataTargets <- dataTargets[-testIndexes, ]
model <- RSNNS::mlp(trainDataValues, trainDataTargets, size=c(12,12,12,12), learnFuncParams=c(0.1,0.2,0.1,0.2),
maxit=3000, learnFunc="Rprop", inputsTest=testDataValues, targetsTest=testDataTargets)
predictions <- predict(model, testDataValues)
myMatrix <- RSNNS::confusionMatrix(testDataTargets,predictions)
accuracyPrediction <- (myMatrix[1, 1] + myMatrix[2, 2])/nrow(testDataTargets)
accuracyList[i] <- accuracyPrediction
cat("Matriz de confusao para k =", i, "\n")
print(myMatrix)
cat("A acurácia para k =", i, "é", accuracyPrediction, "\n")
}
library(RSNNS)
library(doParallel)
# Registramos computação paralela
# O número de "workers" é igual a metade do número de núcleos do processador da máquina
registerDoParallel()
# Carregando os dados a partir do arquivo CSV phishing_websites contendo as informações sobre os sites
# Esse arquivo deve estar na pasta raiz do projeto dentro da pasta Dataset
data <- read.csv(file="Dataset/phishing_websites.csv", header=FALSE, sep=",")
# Nome das colunas, ou seja, o nome dos atributos dos dados.
# O último atributo (target) informa se o site é phishing ou não (1 para phishing e -1 para seguro)
atributos <- c("ip_como_url", "url_longa", "encurtador_links", "tem_arroba",
"redireciona_barra_barra", "prefx_sufx_hifen", "sub_dominio",
"estado_ssl", "duracao_dominio", "favicon", "porta_nao_padrao",
"https_token", "url_requisicao", "cond_ancora", "tag_links",
"SFH", "pede_email", "url_anormal", "redireciona",
"status_bar", "click_direito", "popup", "iframe_redirec",
"idade_dominio", "dns_registro", "trafego", "rank_pagina",
"indexado_google", "links_para_pagina", "relatorios_estatisticos", "target")
# Adicionamos à tabela de dados o nome das colunas
names(data) <- atributos
# Embaralhamos os dados utilizados
data <- data[sample(1:nrow(data),length(1:nrow(data))),1:ncol(data)]
# Separamos os dados do target de cada um
dataValues <- data[,1:30]
dataTargets <- decodeClassLabels(data[,31])
# Aplicamos o algoritmo de K Fold Cross Validation com K = 10
k_cv <- 10
folds <- cut(seq(1, nrow(data)), breaks = k_cv, labels=FALSE)
accuracyList <- vector("numeric", k_cv)
for (i in 1:k_cv) {
cat("Iniciando geração do modelo para k =", i, "\n")
testIndexes <- which(folds==i, arr.ind = TRUE)
testDataValues <- dataValues[testIndexes, ]
testDataTargets <- dataTargets[testIndexes, ]
trainDataValues <- dataValues[-testIndexes, ]
trainDataTargets <- dataTargets[-testIndexes, ]
model <- RSNNS::mlp(trainDataValues, trainDataTargets, size=c(14,14,14,14), learnFuncParams=c(0.1,0.2,0.1,0.2),
maxit=3000, learnFunc="Rprop", inputsTest=testDataValues, targetsTest=testDataTargets)
predictions <- predict(model, testDataValues)
myMatrix <- RSNNS::confusionMatrix(testDataTargets,predictions)
accuracyPrediction <- (myMatrix[1, 1] + myMatrix[2, 2])/nrow(testDataTargets)
accuracyList[i] <- accuracyPrediction
cat("Matriz de confusao para k =", i, "\n")
print(myMatrix)
cat("A acurácia para k =", i, "é", accuracyPrediction, "\n")
}
library(RSNNS)
library(doParallel)
# Registramos computação paralela
# O número de "workers" é igual a metade do número de núcleos do processador da máquina
registerDoParallel()
# Carregando os dados a partir do arquivo CSV phishing_websites contendo as informações sobre os sites
# Esse arquivo deve estar na pasta raiz do projeto dentro da pasta Dataset
data <- read.csv(file="Dataset/phishing_websites.csv", header=FALSE, sep=",")
# Nome das colunas, ou seja, o nome dos atributos dos dados.
# O último atributo (target) informa se o site é phishing ou não (1 para phishing e -1 para seguro)
atributos <- c("ip_como_url", "url_longa", "encurtador_links", "tem_arroba",
"redireciona_barra_barra", "prefx_sufx_hifen", "sub_dominio",
"estado_ssl", "duracao_dominio", "favicon", "porta_nao_padrao",
"https_token", "url_requisicao", "cond_ancora", "tag_links",
"SFH", "pede_email", "url_anormal", "redireciona",
"status_bar", "click_direito", "popup", "iframe_redirec",
"idade_dominio", "dns_registro", "trafego", "rank_pagina",
"indexado_google", "links_para_pagina", "relatorios_estatisticos", "target")
# Adicionamos à tabela de dados o nome das colunas
names(data) <- atributos
# Embaralhamos os dados utilizados
data <- data[sample(1:nrow(data),length(1:nrow(data))),1:ncol(data)]
# Separamos os dados do target de cada um
dataValues <- data[,1:30]
dataTargets <- decodeClassLabels(data[,31])
# Aplicamos o algoritmo de K Fold Cross Validation com K = 10
k_cv <- 10
folds <- cut(seq(1, nrow(data)), breaks = k_cv, labels=FALSE)
accuracyList <- vector("numeric", k_cv)
for (i in 1:k_cv) {
cat("Iniciando geração do modelo para k =", i, "\n")
testIndexes <- which(folds==i, arr.ind = TRUE)
testDataValues <- dataValues[testIndexes, ]
testDataTargets <- dataTargets[testIndexes, ]
trainDataValues <- dataValues[-testIndexes, ]
trainDataTargets <- dataTargets[-testIndexes, ]
model <- RSNNS::mlp(trainDataValues, trainDataTargets, size=c(14,14,14,14), learnFuncParams=c(0.1,0.2,0.1,0.2),
maxit=3000, learnFunc="Rprop", inputsTest=testDataValues, targetsTest=testDataTargets)
predictions <- predict(model, testDataValues)
myMatrix <- RSNNS::confusionMatrix(testDataTargets,predictions)
accuracyPrediction <- (myMatrix[1, 1] + myMatrix[2, 2])/nrow(testDataTargets)
accuracyList[i] <- accuracyPrediction
cat("Matriz de confusao para k =", i, "\n")
print(myMatrix)
cat("A acurácia para k =", i, "é", accuracyPrediction, "\n")
}
library(RSNNS)
library(doParallel)
# Registramos computação paralela
# O número de "workers" é igual a metade do número de núcleos do processador da máquina
registerDoParallel()
# Carregando os dados a partir do arquivo CSV phishing_websites contendo as informações sobre os sites
# Esse arquivo deve estar na pasta raiz do projeto dentro da pasta Dataset
data <- read.csv(file="Dataset/phishing_websites.csv", header=FALSE, sep=",")
# Nome das colunas, ou seja, o nome dos atributos dos dados.
# O último atributo (target) informa se o site é phishing ou não (1 para phishing e -1 para seguro)
atributos <- c("ip_como_url", "url_longa", "encurtador_links", "tem_arroba",
"redireciona_barra_barra", "prefx_sufx_hifen", "sub_dominio",
"estado_ssl", "duracao_dominio", "favicon", "porta_nao_padrao",
"https_token", "url_requisicao", "cond_ancora", "tag_links",
"SFH", "pede_email", "url_anormal", "redireciona",
"status_bar", "click_direito", "popup", "iframe_redirec",
"idade_dominio", "dns_registro", "trafego", "rank_pagina",
"indexado_google", "links_para_pagina", "relatorios_estatisticos", "target")
# Adicionamos à tabela de dados o nome das colunas
names(data) <- atributos
# Embaralhamos os dados utilizados
data <- data[sample(1:nrow(data),length(1:nrow(data))),1:ncol(data)]
# Separamos os dados do target de cada um
dataValues <- data[,1:30]
dataTargets <- decodeClassLabels(data[,31])
# Aplicamos o algoritmo de K Fold Cross Validation com K = 10
k_cv <- 10
folds <- cut(seq(1, nrow(data)), breaks = k_cv, labels=FALSE)
accuracyList <- vector("numeric", k_cv)
for (i in 1:k_cv) {
cat("Iniciando geração do modelo para k =", i, "\n")
testIndexes <- which(folds==i, arr.ind = TRUE)
testDataValues <- dataValues[testIndexes, ]
testDataTargets <- dataTargets[testIndexes, ]
trainDataValues <- dataValues[-testIndexes, ]
trainDataTargets <- dataTargets[-testIndexes, ]
model <- RSNNS::mlp(trainDataValues, trainDataTargets, size=c(12,12,12,12), learnFuncParams=c(0.1,0.2,0.1,0.2),
maxit=100, learnFunc="Rprop", inputsTest=testDataValues, targetsTest=testDataTargets)
predictions <- predict(model, testDataValues)
myMatrix <- RSNNS::confusionMatrix(testDataTargets,predictions)
accuracyPrediction <- (myMatrix[1, 1] + myMatrix[2, 2])/nrow(testDataTargets)
accuracyList[i] <- accuracyPrediction
cat("Matriz de confusao para k =", i, "\n")
print(myMatrix)
cat("A acurácia para k =", i, "é", accuracyPrediction, "\n")
}
print(myMatrix)
library(RSNNS)
library(doParallel)
# Registramos computação paralela
# O número de "workers" é igual a metade do número de núcleos do processador da máquina
registerDoParallel()
# Carregando os dados a partir do arquivo CSV phishing_websites contendo as informações sobre os sites
# Esse arquivo deve estar na pasta raiz do projeto dentro da pasta Dataset
data <- read.csv(file="Dataset/phishing_websites.csv", header=FALSE, sep=",")
# Nome das colunas, ou seja, o nome dos atributos dos dados.
# O último atributo (target) informa se o site é phishing ou não (1 para phishing e -1 para seguro)
atributos <- c("ip_como_url", "url_longa", "encurtador_links", "tem_arroba",
"redireciona_barra_barra", "prefx_sufx_hifen", "sub_dominio",
"estado_ssl", "duracao_dominio", "favicon", "porta_nao_padrao",
"https_token", "url_requisicao", "cond_ancora", "tag_links",
"SFH", "pede_email", "url_anormal", "redireciona",
"status_bar", "click_direito", "popup", "iframe_redirec",
"idade_dominio", "dns_registro", "trafego", "rank_pagina",
"indexado_google", "links_para_pagina", "relatorios_estatisticos", "target")
# Adicionamos à tabela de dados o nome das colunas
names(data) <- atributos
# Embaralhamos os dados utilizados
data <- data[sample(1:nrow(data),length(1:nrow(data))),1:ncol(data)]
# Separamos os dados do target de cada um
dataValues <- data[,1:30]
dataTargets <- decodeClassLabels(data[,31])
# Aplicamos o algoritmo de K Fold Cross Validation com K = 10
k_cv <- 10
folds <- cut(seq(1, nrow(data)), breaks = k_cv, labels=FALSE)
accuracyList <- vector("numeric", k_cv)
for (i in 1:k_cv) {
cat("Iniciando geração do modelo para k =", i, "\n")
testIndexes <- which(folds==i, arr.ind = TRUE)
testDataValues <- dataValues[testIndexes, ]
testDataTargets <- dataTargets[testIndexes, ]
trainDataValues <- dataValues[-testIndexes, ]
trainDataTargets <- dataTargets[-testIndexes, ]
model <- RSNNS::mlp(trainDataValues, trainDataTargets, size=c(12,12,12,12), learnFuncParams=c(0.1,0.2,0.1,0.2),
maxit=100, learnFunc="Rprop", inputsTest=testDataValues, targetsTest=testDataTargets)
predictions <- predict(model, testDataValues)
myMatrix <- RSNNS::confusionMatrix(testDataTargets,predictions)
accuracyPrediction <- (myMatrix[1, 1] + myMatrix[2, 2])/nrow(testDataTargets)
accuracyList[i] <- accuracyPrediction
cat("Matriz de confusao para k =", i, "\n")
print(myMatrix)
cat("A acurácia para k =", i, "é", accuracyPrediction, "\n")
}
averageAccuracy = mean(accuracyList)
cat("A acurácia final do modelo é", averageAccuracy)
par(mfrow=c(2,2))
RSNNS::plotIterativeError(model)
# Calculando as saidas previstas pela rede MLP
#predictions <- predict(model, data$inputsTest)
#RSNNS::plotRegressionError(predictions[,2], data$targetsTest[,2])
# Monta a matrix de confusão entre a saída esperada e a saída calculada
#RSNNS::confusionMatrix(data$targetsTrain,fitted.values(model))
#RSNNS::confusionMatrix(data$targetsTest,predictions)
#modelPrecision <- 1.2
View(predictions)
View(predictions)
pred <- predictions
l <- vector("numeric", 2)
l[1] = predictions
l <- vector("list", 2)
l[[1] = predictions
l[[1]] = predictions
l[[2]] = pred
l[[1]]
mean(l)
Reduce("+", l) / length(l)
library(RSNNS)
library(doParallel)
# Registramos computação paralela
# O número de "workers" é igual a metade do número de núcleos do processador da máquina
registerDoParallel()
# Carregando os dados a partir do arquivo CSV phishing_websites contendo as informações sobre os sites
# Esse arquivo deve estar na pasta raiz do projeto dentro da pasta Dataset
data <- read.csv(file="Dataset/phishing_websites.csv", header=FALSE, sep=",")
# Nome das colunas, ou seja, o nome dos atributos dos dados.
# O último atributo (target) informa se o site é phishing ou não (1 para phishing e -1 para seguro)
atributos <- c("ip_como_url", "url_longa", "encurtador_links", "tem_arroba",
"redireciona_barra_barra", "prefx_sufx_hifen", "sub_dominio",
"estado_ssl", "duracao_dominio", "favicon", "porta_nao_padrao",
"https_token", "url_requisicao", "cond_ancora", "tag_links",
"SFH", "pede_email", "url_anormal", "redireciona",
"status_bar", "click_direito", "popup", "iframe_redirec",
"idade_dominio", "dns_registro", "trafego", "rank_pagina",
"indexado_google", "links_para_pagina", "relatorios_estatisticos", "target")
# Adicionamos à tabela de dados o nome das colunas
names(data) <- atributos
# Embaralhamos os dados utilizados
data <- data[sample(1:nrow(data),length(1:nrow(data))),1:ncol(data)]
# Separamos os dados do target de cada um
dataValues <- data[,1:30]
dataTargets <- decodeClassLabels(data[,31])
# Aplicamos o algoritmo de K Fold Cross Validation com K = 10
k_cv <- 10
folds <- cut(seq(1, nrow(data)), breaks = k_cv, labels=FALSE)
accuracyList <- vector("numeric", k_cv)
for (i in 1:k_cv) {
cat("Iniciando geração do modelo para k =", i, "\n")
testIndexes <- which(folds==i, arr.ind = TRUE)
testDataValues <- dataValues[testIndexes, ]
testDataTargets <- dataTargets[testIndexes, ]
trainDataValues <- dataValues[-testIndexes, ]
trainDataTargets <- dataTargets[-testIndexes, ]
model <- RSNNS::mlp(trainDataValues, trainDataTargets, size=c(12,12,12,12), learnFuncParams=c(0.1,0.2,0.1,0.2),
maxit=1000, learnFunc="Rprop", inputsTest=testDataValues, targetsTest=testDataTargets)
predictions <- predict(model, testDataValues)
myMatrix <- RSNNS::confusionMatrix(testDataTargets,predictions)
accuracyPrediction <- (myMatrix[1, 1] + myMatrix[2, 2])/nrow(testDataTargets)
accuracyList[i] <- accuracyPrediction
cat("Matriz de confusao para k =", i, "\n")
print(myMatrix)
cat("A acurácia para k =", i, "é", accuracyPrediction, "\n")
}
library(RSNNS)
library(doParallel)
# Registramos computação paralela
# O número de "workers" é igual a metade do número de núcleos do processador da máquina
registerDoParallel()
# Carregando os dados a partir do arquivo CSV phishing_websites contendo as informações sobre os sites
# Esse arquivo deve estar na pasta raiz do projeto dentro da pasta Dataset
data <- read.csv(file="Dataset/phishing_websites.csv", header=FALSE, sep=",")
# Nome das colunas, ou seja, o nome dos atributos dos dados.
# O último atributo (target) informa se o site é phishing ou não (1 para phishing e -1 para seguro)
atributos <- c("ip_como_url", "url_longa", "encurtador_links", "tem_arroba",
"redireciona_barra_barra", "prefx_sufx_hifen", "sub_dominio",
"estado_ssl", "duracao_dominio", "favicon", "porta_nao_padrao",
"https_token", "url_requisicao", "cond_ancora", "tag_links",
"SFH", "pede_email", "url_anormal", "redireciona",
"status_bar", "click_direito", "popup", "iframe_redirec",
"idade_dominio", "dns_registro", "trafego", "rank_pagina",
"indexado_google", "links_para_pagina", "relatorios_estatisticos", "target")
# Adicionamos à tabela de dados o nome das colunas
names(data) <- atributos
# Embaralhamos os dados utilizados
data <- data[sample(1:nrow(data),length(1:nrow(data))),1:ncol(data)]
# Separamos os dados do target de cada um
dataValues <- data[,1:30]
dataTargets <- decodeClassLabels(data[,31])
# Aplicamos o algoritmo de K Fold Cross Validation com K = 10
k_cv <- 10
folds <- cut(seq(1, nrow(data)), breaks = k_cv, labels=FALSE)
accuracyList <- vector("numeric", k_cv)
for (i in 1:k_cv) {
cat("Iniciando geração do modelo para k =", i, "\n")
testIndexes <- which(folds==i, arr.ind = TRUE)
testDataValues <- dataValues[testIndexes, ]
testDataTargets <- dataTargets[testIndexes, ]
trainDataValues <- dataValues[-testIndexes, ]
trainDataTargets <- dataTargets[-testIndexes, ]
model <- RSNNS::mlp(trainDataValues, trainDataTargets, size=c(12,12,12,12), learnFuncParams=c(0.1,0.2,0.1,0.2),
maxit=2000, learnFunc="Rprop", inputsTest=testDataValues, targetsTest=testDataTargets)
predictions <- predict(model, testDataValues)
myMatrix <- RSNNS::confusionMatrix(testDataTargets,predictions)
accuracyPrediction <- (myMatrix[1, 1] + myMatrix[2, 2])/nrow(testDataTargets)
accuracyList[i] <- accuracyPrediction
cat("Matriz de confusao para k =", i, "\n")
print(myMatrix)
cat("A acurácia para k =", i, "é", accuracyPrediction, "\n")
}
averageAccuracy = mean(accuracyList)
cat("A acurácia final do modelo é", averageAccuracy)
par(mfrow=c(2,2))
RSNNS::plotIterativeError(model)
# Calculando as saidas previstas pela rede MLP
#predictions <- predict(model, data$inputsTest)
#RSNNS::plotRegressionError(predictions[,2], data$targetsTest[,2])
# Monta a matrix de confusão entre a saída esperada e a saída calculada
#RSNNS::confusionMatrix(data$targetsTrain,fitted.values(model))
#RSNNS::confusionMatrix(data$targetsTest,predictions)
#modelPrecision <- 1.2
library(RSNNS)
library(doParallel)
# Registramos computação paralela
# O número de "workers" é igual a metade do número de núcleos do processador da máquina
registerDoParallel()
# Carregando os dados a partir do arquivo CSV phishing_websites contendo as informações sobre os sites
# Esse arquivo deve estar na pasta raiz do projeto dentro da pasta Dataset
data <- read.csv(file="Dataset/phishing_websites.csv", header=FALSE, sep=",")
# Nome das colunas, ou seja, o nome dos atributos dos dados.
# O último atributo (target) informa se o site é phishing ou não (1 para phishing e -1 para seguro)
atributos <- c("ip_como_url", "url_longa", "encurtador_links", "tem_arroba",
"redireciona_barra_barra", "prefx_sufx_hifen", "sub_dominio",
"estado_ssl", "duracao_dominio", "favicon", "porta_nao_padrao",
"https_token", "url_requisicao", "cond_ancora", "tag_links",
"SFH", "pede_email", "url_anormal", "redireciona",
"status_bar", "click_direito", "popup", "iframe_redirec",
"idade_dominio", "dns_registro", "trafego", "rank_pagina",
"indexado_google", "links_para_pagina", "relatorios_estatisticos", "target")
# Adicionamos à tabela de dados o nome das colunas
names(data) <- atributos
# Embaralhamos os dados utilizados
data <- data[sample(1:nrow(data),length(1:nrow(data))),1:ncol(data)]
# Separamos os dados do target de cada um
dataValues <- data[,1:30]
dataTargets <- decodeClassLabels(data[,31])
# Aplicamos o algoritmo de K Fold Cross Validation com K = 10
k_cv <- 10
folds <- cut(seq(1, nrow(data)), breaks = k_cv, labels=FALSE)
accuracyList <- vector("numeric", k_cv)
for (i in 1:k_cv) {
cat("Iniciando geração do modelo para k =", i, "\n")
testIndexes <- which(folds==i, arr.ind = TRUE)
testDataValues <- dataValues[testIndexes, ]
testDataTargets <- dataTargets[testIndexes, ]
trainDataValues <- dataValues[-testIndexes, ]
trainDataTargets <- dataTargets[-testIndexes, ]
model <- RSNNS::mlp(trainDataValues, trainDataTargets, size=c(12,12,12,12), learnFuncParams=c(0.1,0.2,0.1,0.2),
maxit=3000, learnFunc="Rprop", inputsTest=testDataValues, targetsTest=testDataTargets)
predictions <- predict(model, testDataValues)
myMatrix <- RSNNS::confusionMatrix(testDataTargets,predictions)
accuracyPrediction <- (myMatrix[1, 1] + myMatrix[2, 2])/nrow(testDataTargets)
accuracyList[i] <- accuracyPrediction
cat("Matriz de confusao para k =", i, "\n")
print(myMatrix)
cat("A acurácia para k =", i, "é", accuracyPrediction, "\n")
}
averageAccuracy = mean(accuracyList)
cat("A acurácia final do modelo é", averageAccuracy)
par(mfrow=c(2,2))
RSNNS::plotIterativeError(model)
# Calculando as saidas previstas pela rede MLP
#predictions <- predict(model, data$inputsTest)
#RSNNS::plotRegressionError(predictions[,2], data$targetsTest[,2])
# Monta a matrix de confusão entre a saída esperada e a saída calculada
#RSNNS::confusionMatrix(data$targetsTrain,fitted.values(model))
#RSNNS::confusionMatrix(data$targetsTest,predictions)
#modelPrecision <- 1.2
myMatrix
l <- vector("list", 10)
l <- vector("list", 2)
l[[1]] = myMatrix
l[[2]] = myMatrix
l
Reduce("+", l) / length(l)
averageConfusionMatrix = Reduce("+", l) / length(l)
averageConfusionMatrix
View(l)
View(l)
l[[1]]
cat("A acurácia para k =", i, "é", accuracyPrediction, "\n")
View(predictions)
View(predictions)
View(dataTargets)
View(dataTargets)
View(predictions)
View(predictions)
View(dataTargets)
View(dataTargets)
myMatrix
myMatrix[2,1]
myMatrix[2,2]
source('~/TrabalhoML/TrabalhoML/R/phishing_detection.R', encoding = 'UTF-8')
source('~/TrabalhoML/TrabalhoML/R/phishing_detection.R', encoding = 'UTF-8')
